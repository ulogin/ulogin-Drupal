<?php

function ulogin_help($path, $arg) {
  $output = '';  //declare your output variable
  switch ($path) {
    case "admin/help#ulogin":
      $output = '<p><a href="http://ulogin.ru" target="_blank">uLogin</a> — это инструмент, который позволяет пользователям получить единый доступ к различным Интернет-сервисам без необходимости повторной регистрации, а владельцам сайтов — получить дополнительный приток клиентов из социальных сетей и популярных порталов (Google, Яндекс, Mail.ru, ВКонтакте, Facebook и др.)</p>'.
				'Для работы модуля достаточно указать ID Личного Кабинета на сайте. Более подробную справку по работе с ЛК читайте <a href="http://ulogin.ru/help.php" target="_blank">здесь</a>';
      break;

  }
  return $output;
}

function ulogin_menu() {
	$items = array();
    $items['ulogin/token'] = array(
        'access callback' => true,
        'page callback' => 'ulogin_token',
        'type' => MENU_CALLBACK
    );
    $items['ulogin/unlink'] = array(
        'access callback' => true,
        'page callback' => 'ulogin_unlink',
        'type' => MENU_CALLBACK
    );
	$items['admin/config/content/ulogin'] = array(
        'title'            => 'uLogin',
        'description'      => 'Конфигурация модуля uLogin',
        'page callback'    => 'drupal_get_form',
		'page arguments'   => array('ulogin_configuration_form'),
        'access arguments' => array('administer site configuration'),
    );
	return $items;
}

function ulogin_configuration_form() {
  $form = array();
  $form['ulogin_widget'] = array(
    '#type' => 'textfield',
    '#title' => t('Идентификатор виджета'),
    '#default_value' => variable_get('ulogin_widget', ''),
    '#size' => 30,
    '#maxlength' => 8,
    '#description' => t('Идентификатор виджета можно взять в <a href="http://ulogin.ru/lk.php" target="_blank">личном кабинете</a>'),
  );
    $widget = variable_get('ulogin_widget');
  return system_settings_form($form);
}


function ulogin_button() {
    drupal_add_library('system', 'drupal.ajax');
	$widget = variable_get('ulogin_widget');
	$redirect_uri = urlencode(url('ulogin/token', array('absolute' => true, 'query' => array('redirect' => current_path()))));
	if (empty($widget))
        $code = '<script src="//ulogin.ru/js/ulogin.js"></script><div><a id="uLoginBlock" data-ulogin="display=window;fields=first_name,last_name,email;redirect_uri='.$redirect_uri.'"><img src="http://ulogin.ru/img/button.png" width=187 height=30 alt="МультиВход"/></a></div><script type="text/javascript">//uLogin.customInit("uLoginBlock")</script>';
	else
        $code = '<script src="//ulogin.ru/js/ulogin.js"></script><div id="uLogin_'.$widget.'" data-uloginid="'.$widget.'" data-ulogin="redirect_uri='.$redirect_uri.';callback=uLoginCallback"></div><script type="text/javascript">//uLogin.customInit("uLogin_'.$widget.'")</script>';
    $code .= '<script type="text/javascript">
    function uLoginCallback(t) {
        (function ($) {
            $.ajax( {
                url : "'.url('ulogin/token', array('absolute' => true)).'",
                type : "POST",
                data : {token : t, callback : "uLoginCallback"},
                success : function(result) {
                    document.location.reload();
                }
            });
        })(jQuery)
    }
    </script>';
    return $code;

}

function ulogin_button_merge() {
    global $user;
    $widget_code = '<div class="ulogin_sync">Выберите соц. сеть для привязки аккаунта:<br>';
    $widget_code .= ulogin_button();
    drupal_add_css(drupal_get_path('module', 'ulogin').'/css/base.css');

    $merged_networks = db_select('ulogin_profile', 'up')
        ->fields('up', array('network'))
        ->condition('user_id', $user->uid)
        ->execute()
        ->fetchCol();
    if (count($merged_networks)>0) {
        $widget_code .= '<div class="merged">Привязанные аккаунты:<br>';
        foreach ($merged_networks as $network) {
            $widget_code .= l('<div class="ulogin-button '.$network.'"></div>','ulogin/unlink', array('query' => array('network' => $network), 'absolute' => true, 'html' => true));
        }
        $widget_code .= '</div><div class="description">клик по иконке для удаления привязки</div>';
    }
    $widget_code .= "</div>";
    return $widget_code;
}
function ulogin_form_user_login_block_alter(&$form) {
	$form['ulogin'] = array('#value' => ulogin_button(), '#markup' => ulogin_button());
}
function ulogin_form_user_register_form_alter(&$form) {
    $content = '<div class="description">Или воспользуйтесь аккаунтом в социальных сетях.</div>';
	$form['ulogin'] = array('#value' => ulogin_button(), '#markup' => ulogin_button().$content);
}
function ulogin_form_user_login_alter(&$form) {
	$form['ulogin'] = array('#value' => ulogin_button(), '#markup' => ulogin_button());
}

function ulogin_form_alter(&$form, $form_state, $form_id) {
    // Show private fields to administrators and people viewing their own account.
    if ($form_id == 'user_profile_form') {
        $form['ulogin'] = array(
            '#type' => 'fieldset',
            '#title' => t('Синхронизация учётных записей'),

        );
        $form['ulogin']['button'] = array(
            '#value' => ulogin_button(),
            '#markup' => ulogin_button_merge()
        );
    }
}

function ulogin_unlink() {
    global $user;
    if (user_is_logged_in() && isset($_GET['network'])) {
        $network = $_GET['network'];
            db_delete("ulogin_profile")
                ->condition("network", $network)
                ->condition("user_id", $user->uid)
                ->execute();
        drupal_goto('user/'.$user->uid.'/edit');
    }
    drupal_goto();
}

function ulogin_token() {
    global $user;
    $logged = true;

	$token = isset($_POST['token']) ? $_POST['token'] : '';

	if (empty($token)){
		if (!isset($_POST['callback']) && !isset($_GET['redirect']))
		{
			drupal_not_found();
			return;
		}
		drupal_set_message( 'Ошибка при авторизации', 'error' );
	} else {

		$data = drupal_http_request( 'http://ulogin.ru/token.php?token=' . $token . '&host=' . $_SERVER['HTTP_HOST'] );
		$data = json_decode( $data->data, true );

		if ( isset( $data['uid'] ) ) {

			$first_name_enabled = isset($data['first_name']);
			$email_enabled = isset($data['email']);

			if ( $first_name_enabled && $email_enabled) {
				if ( isset( $user ) && $user->uid > 0 ) { // synchronization
					$logged = false;
					$cnt    = db_select( 'ulogin_profile', 'up' )
						->fields( 'up', array( 'id' ) )
						->condition( 'identity', $data['identity'] )
						->execute()
						->rowCount();
					if ( $cnt == 0 ) {
						$merged_networks = db_select( 'ulogin_profile', 'up' )
							->fields( 'up', array( 'network' ) )
							->condition( 'user_id', $user->uid )
							->execute()
							->fetchCol();
						if ( ! in_array( $data['network'], $merged_networks ) ) {
							$data['user_id'] = $user->uid;
							db_insert( 'ulogin_profile' )
								->fields( intersect_profile_data( $data ) )
								->execute();
						}
					} else {
						drupal_set_message( 'Данный аккаунт уже связан с другим профилем', 'warning' );
					}
				} else if ( isset( $data["verified_email"] ) && intval( $data["verified_email"] ) == 1 ) { // authorization
					$uid = db_select( 'ulogin_profile', 'up' )
						->fields( 'up', array( 'user_id' ) )
						->condition( 'identity', $data['identity'] )
						->execute()
						->fetchField();
					if ( empty( $uid ) ) { // social account already linked
						$account = user_load_by_mail( $data["email"] );
						if ( ! empty( $account ) ) {
							$uid      = $account->uid;
							$profiles = db_select( 'ulogin_profile', 'up' )
								->fields( 'up', array( 'identity' ) )
								->condition( 'user_id', $uid )
								->execute()
								->fetchCol();
							if ( count( $profiles ) > 0 && ! isset( $data['merge_account'] ) ) {
								$logged = false;
								drupal_set_message( '<script src="//ulogin.ru/js/ulogin.js" type="text/javascript"></script><script type="text/javascript">uLogin.mergeAccounts("' . $token . '","' . $profiles[0] . '")</script>
                                    Пользователь с таким email уже существует в системе. <br>Требуется привязка новой учётной записи социальной сети к этому аккаунту.
                              ', 'warning' );
							} else {
								$data['user_id'] = $uid;
								db_insert( 'ulogin_profile' )
									->fields( intersect_profile_data( $data ) )
									->execute();
							}
						} else {
							if ( function_exists( 'file_save' ) ) {
								$photo = drupal_http_request( isset( $data['photo_big'] ) ? $data['photo_big'] : ( isset( $data['photo'] ) ? $data['photo'] : "https://ulogin.ru/img/photo_big.png" ), $data['network'] == "odnoklassniki" ? array( "headers" => array( "Referer:http://odnoklassniki.ru" ) ) : array() );
								$file  = file_save_data( $photo->data, 'public://' . 'ulogin_' . $data['network'] . '_' . $data['uid'] . '.jpg' );
							}
							try {
								$new_user_data = array(
									'init'    => 'ulogin_' . $data['network'] . '_' . $data['uid'],
									'status'  => 1,
									'mail'    => $data['email'],
									'name'    => generateNickname( $data['first_name'], isset( $data['last_name'] ) ? $data['last_name'] : null, isset( $data['nickname'] ) ? $data['nickname'] : null, isset( $data['bdate'] ) ? $data['bdate'] : null ),
									'pass'    => user_password(),
									'picture' => isset( $file ) ? $file->fid : null
								);
								$account       = user_save( drupal_anonymous_user(), $new_user_data );
								if ( ! $account )
									throw new Exception( 'Ошибка добавления в базу данных' );

								$uid             = $account->uid;
								$data['user_id'] = $uid;
								db_insert( 'ulogin_profile' )
									->fields( intersect_profile_data( $data ) )
									->execute();
								user_set_authmaps( $account, array( "authname_ulogin" => $new_user_data['name'] ) );
							} catch ( Exception $e ) {
								throw new Exception( 'Ошибка при регистрации пользователя uLogin.', 0, $e );
							}
						}
					} else { //update user data

						$indb_data = db_select( 'ulogin_profile', 'up' )
							->fields( 'up' )
							->condition( 'identity', $data['identity'] )
							->execute()
							->fetchAssoc();
						update_profile_data( $data, $indb_data );

						$photo = drupal_http_request( isset( $data['photo_big'] ) ? $data['photo_big'] : ( isset( $data['photo'] ) ? $data['photo'] : "https://ulogin.ru/img/photo_big.png" ), $data['network'] == "odnoklassniki" ? array( "headers" => array( "Referer:http://odnoklassniki.ru" ) ) : array() );
						$file  = file_save_data( $photo->data, 'public://' . 'ulogin_' . $data['network'] . '_' . $data['uid'] . '.jpg' );

						$account = user_load( $indb_data["user_id"] );

						user_save( $account, array( 'picture' => $file ) );

						db_update( 'ulogin_profile' )
							->fields( $indb_data )
							->condition( 'id', $indb_data['id'] )
							->execute();
					}
					if ( $logged ) {
						$form_state['uid'] = $uid;
						user_login_submit( array(), $form_state );
					}
				} else
					drupal_set_message( '<script src="//ulogin.ru/js/ulogin.js" type="text/javascript"></script><script type="text/javascript">uLogin.mergeAccounts("' . $token . '")</script>
                                    Требуется подтверждение на владение указанным email.
                              ', 'warning' );
			} else {
				if (!$email_enabled && !$first_name_enabled) {drupal_set_message( t( 'Необходимо включить в обязательных полях профиля поле Имя и Email в Личном кабинете uLogin' ), 'error' );}
				elseif (!$first_name_enabled) {drupal_set_message( t( 'Необходимо включить в обязательных полях профиля поле Имя в Личном кабинете uLogin' ), 'error' );}
				elseif (!$email_enabled) {drupal_set_message( t( 'Необходимо включить в обязательных полях профиля поле Email в Личном кабинете uLogin' ), 'error' );}
			}
		}
	}
    if (isset($_POST['callback']))
        print '';
    else
        drupal_goto(isset($_GET['redirect']) ? $_GET['redirect'] : '');
}

function intersect_profile_data($array) {
    $allow_keys = array('uid','identity','network','last_name','first_name','email','profile','nickname','sex','bdate','phone','city','country', 'user_id');
    $result = array();
    foreach ($allow_keys as $key) {
        if (array_key_exists($key, $array))
            $result[$key] = $array[$key];
    }
    return $result;
}
function update_profile_data($new_data, &$old_data) {
    foreach ($old_data as $key=>&$value) {
        if (!empty($new_data[$key]))
            $value = $new_data[$key];
    }
}

/**
 * @param string $first_name
 * @param string $last_name
 * @param string $nickname
 * @param string $bdate (string in format: dd.mm.yyyy)
 * @param array $delimiters
 * @return string
 */
function generateNickname($first_name, $last_name="", $nickname="", $bdate="", $delimiters=array('.', '_')) {
    $delim = array_shift($delimiters);

    $first_name = translitIt($first_name);
    $first_name_s = substr($first_name, 0, 1);

    $variants = array();
    if (!empty($nickname))
        $variants[] = $nickname;
    $variants[] = $first_name;
    if (!empty($last_name)) {
        $last_name = translitIt($last_name);
        $variants[] = $first_name.$delim.$last_name;
        $variants[] = $last_name.$delim.$first_name;
        $variants[] = $first_name_s.$delim.$last_name;
        $variants[] = $first_name_s.$last_name;
        $variants[] = $last_name.$delim.$first_name_s;
        $variants[] = $last_name.$first_name_s;
    }
    if (!empty($bdate)) {
        $date = explode('.', $bdate);
        $variants[] = $first_name.$date[2];
        $variants[] = $first_name.$delim.$date[2];
        $variants[] = $first_name.$date[0].$date[1];
        $variants[] = $first_name.$delim.$date[0].$date[1];
        $variants[] = $first_name.$delim.$last_name.$date[2];
        $variants[] = $first_name.$delim.$last_name.$delim.$date[2];
        $variants[] = $first_name.$delim.$last_name.$date[0].$date[1];
        $variants[] = $first_name.$delim.$last_name.$delim.$date[0].$date[1];
        $variants[] = $last_name.$delim.$first_name.$date[2];
        $variants[] = $last_name.$delim.$first_name.$delim.$date[2];
        $variants[] = $last_name.$delim.$first_name.$date[0].$date[1];
        $variants[] = $last_name.$delim.$first_name.$delim.$date[0].$date[1];
        $variants[] = $first_name_s.$delim.$last_name.$date[2];
        $variants[] = $first_name_s.$delim.$last_name.$delim.$date[2];
        $variants[] = $first_name_s.$delim.$last_name.$date[0].$date[1];
        $variants[] = $first_name_s.$delim.$last_name.$delim.$date[0].$date[1];
        $variants[] = $last_name.$delim.$first_name_s.$date[2];
        $variants[] = $last_name.$delim.$first_name_s.$delim.$date[2];
        $variants[] = $last_name.$delim.$first_name_s.$date[0].$date[1];
        $variants[] = $last_name.$delim.$first_name_s.$delim.$date[0].$date[1];
        $variants[] = $first_name_s.$last_name.$date[2];
        $variants[] = $first_name_s.$last_name.$delim.$date[2];
        $variants[] = $first_name_s.$last_name.$date[0].$date[1];
        $variants[] = $first_name_s.$last_name.$delim.$date[0].$date[1];
        $variants[] = $last_name.$first_name_s.$date[2];
        $variants[] = $last_name.$first_name_s.$delim.$date[2];
        $variants[] = $last_name.$first_name_s.$date[0].$date[1];
        $variants[] = $last_name.$first_name_s.$delim.$date[0].$date[1];
    }
    $i=0;

    $exist = true;
    while (true) {
        if ($exist = userExist($variants[$i])) {
            foreach ($delimiters as $del) {
                $replaced = str_replace($delim, $del, $variants[$i]);
                if($replaced !== $variants[$i]){
                    $variants[$i] = $replaced;
                    if(!$exist = userExist($variants[$i])){
                        break;
                    }
                }
            }
        }
        if ($i >= count($variants)-1 || !$exist)
            break;
        $i++;
    }

    if ($exist) {
        while ($exist) {
            $nickname = $first_name.mt_rand(1, 100000);
            $exist = userExist($nickname);
        }
        return $nickname;
    } else
        return $variants[$i];
}

function userExist($name) {
    $ex=false;
    if ($name != null && strlen($name)>0)
        $ex = db_select('users')
        ->fields('users', array('uid'))
        ->condition('name', $name)
        ->execute()
        ->rowCount() > 0;
    return $ex;
}

function translitIt($str) {
	$tr = array(
		"А"=>"a","Б"=>"b","В"=>"v","Г"=>"g",
		"Д"=>"d","Е"=>"e","Ж"=>"j","З"=>"z","И"=>"i",
		"Й"=>"y","К"=>"k","Л"=>"l","М"=>"m","Н"=>"n",
		"О"=>"o","П"=>"p","Р"=>"r","С"=>"s","Т"=>"t",
		"У"=>"u","Ф"=>"f","Х"=>"h","Ц"=>"ts","Ч"=>"ch",
		"Ш"=>"sh","Щ"=>"sch","Ъ"=>"","Ы"=>"yi","Ь"=>"",
		"Э"=>"e","Ю"=>"yu","Я"=>"ya","а"=>"a","б"=>"b",
		"в"=>"v","г"=>"g","д"=>"d","е"=>"e","ж"=>"j",
		"з"=>"z","и"=>"i","й"=>"y","к"=>"k","л"=>"l",
		"м"=>"m","н"=>"n","о"=>"o","п"=>"p","р"=>"r",
		"с"=>"s","т"=>"t","у"=>"u","ф"=>"f","х"=>"h",
		"ц"=>"ts","ч"=>"ch","ш"=>"sh","щ"=>"sch","ъ"=>"y",
		"ы"=>"y","ь"=>"","э"=>"e","ю"=>"yu","я"=>"ya"
	);
	if (preg_match('/[^A-Za-z0-9\_\-]/', $str)) {
		$str = strtr($str,$tr);
		$str = preg_replace('/[^A-Za-z0-9\_\-\.]/', '', $str);
	}
	return $str;
}